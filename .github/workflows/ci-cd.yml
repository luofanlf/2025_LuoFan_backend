name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS EC2
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # 设置变量
          REPO_URL="https://github.com/${{ github.repository }}.git"
          PROJECT_DIR="/home/ubuntu/tech-challenge"
          CONTAINER_NAME="tech-challenge-backend"
          IMAGE_NAME="tech-challenge-backend"
          
          # 更新系统并安装必要工具
          sudo apt update -y
          
          # 安装Git（如果没有安装）
          if ! command -v git &> /dev/null; then
            sudo apt install -y git
          fi
          
          # 安装Docker（如果没有安装）
          if ! command -v docker &> /dev/null; then
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ubuntu
          fi
          
          # 确保Docker服务运行
          sudo systemctl start docker
          
          # 停止并删除现有容器（如果存在）
          if docker ps -q -f name=$CONTAINER_NAME; then
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME
          fi
          
          if docker ps -aq -f name=$CONTAINER_NAME; then
            echo "Removing existing container..."
            docker rm $CONTAINER_NAME
          fi
          
          # 删除旧镜像（如果存在）
          if docker images -q $IMAGE_NAME; then
            echo "Removing old image..."
            docker rmi $IMAGE_NAME
          fi
          
          # 清理项目目录并重新克隆
          rm -rf $PROJECT_DIR
          git clone $REPO_URL $PROJECT_DIR
          cd $PROJECT_DIR
          
          # 构建Docker镜像
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME .
          
          # 运行新容器
          echo "Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 80:8080 \
            -p 8081:8081 \
            $IMAGE_NAME
          
          # 等待服务启动
          echo "Waiting for service to start..."
          sleep 30
          
          # 健康检查
          echo "Performing health check..."
          if curl -f http://localhost:8081/healthcheck > /dev/null 2>&1; then
            echo "✅ Health check passed - Service is running properly!"
          else
            echo "⚠️ Health check failed - Service might not be ready yet"
          fi
          
          # 测试API
          echo "Testing API..."
          API_RESPONSE=$(curl -s -X POST http://localhost:80/api/coins \
            -H "Content-Type: application/json" \
            -d '{"totalAmount": 11.00, "denominations": [500, 200, 100, 50, 20, 10, 5, 2, 1]}')
          
          if [[ $API_RESPONSE == *"totalAmount"* ]]; then
            echo "✅ API test passed - Service is working correctly!"
            echo "API Response: $API_RESPONSE"
          else
            echo "❌ API test failed"
            echo "Response: $API_RESPONSE"
            exit 1
          fi
          
          # 显示容器状态
          echo "Container status:"
          docker ps --filter name=$CONTAINER_NAME
          
          # 清理未使用的Docker镜像
          docker system prune -f
          
          echo "🎉 Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment to EC2 was successful!"
        echo "Application is available at: http://${{ secrets.EC2_HOST }}/api/coins"
        
    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "Tests failed"
        fi
        if [[ "${{ needs.deploy.result }}" == "failure" ]]; then
          echo "Deployment failed"
        fi
        exit 1 